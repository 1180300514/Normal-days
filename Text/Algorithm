20/12/2024

1. 深度优先搜索（DFS - Depth First Search）
概念：
深度优先搜索（DFS）是一种遍历或搜索树或图的算法。它的基本思想是沿着一条路径深入到尽头，直到不能继续深入时，回溯并继续探索其他路径。

工作原理：
从起始节点开始，尽可能深入到每个分支的最深处。
访问每个节点一次，并标记已访问。
如果遇到死胡同（即所有相邻节点都已经被访问过），就回溯到上一个节点继续探索其他未访问的节点。
DFS 可以通过递归或栈来实现。

时间复杂度：
时间复杂度：O(V + E)，其中 V 是图中的节点数，E 是图中的边数。每个节点和边都被访问一次。
空间复杂度：O(V)，如果使用递归栈，最坏情况下需要存储所有节点。
应用场景：
图的遍历：如图的深度优先遍历。
拓扑排序：特别在有向无环图（DAG）中。
寻找路径：用于求解迷宫问题或最短路径等。
示例代码（C++）：
cpp
void DFS(int node, vector<vector<int>>& graph, vector<bool>& visited) {
    visited[node] = true;
    cout << node << " ";  // 访问节点

    for (int neighbor : graph[node]) {
        if (!visited[neighbor]) {
            DFS(neighbor, graph, visited);
        }
    }
}
2. 广度优先搜索（BFS - Breadth First Search）
概念：
广度优先搜索（BFS）也是一种图的遍历算法。与 DFS 不同，BFS 是按层次逐层访问每个节点，从起始节点开始，先访问与起始节点距离为 1 的节点，然后是距离为 2 的节点，依此类推。

工作原理：
从起始节点开始，首先访问所有相邻的节点。
然后依次访问这些相邻节点的相邻节点，以此类推，直到所有节点都被访问。
使用 队列（queue） 来实现 BFS，确保节点按照层次顺序访问。
时间复杂度：
时间复杂度：O(V + E)，每个节点和边都被访问一次。
空间复杂度：O(V)，存储队列的节点。
应用场景：
最短路径算法：如在无权图中寻找最短路径。
图的遍历：如广度优先遍历。
分层问题：用于层次分布的搜索，比如层次结构的遍历。
示例代码（C++）：
cpp
void BFS(int start, vector<vector<int>>& graph) {
    vector<bool> visited(graph.size(), false);
    queue<int> q;
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";  // 访问节点

        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}
3. 穷举法（Brute Force）
概念：
穷举法（Brute Force）是一种通过穷尽所有可能的解来找到答案的算法。通常是直接列举出所有可能的情况，然后逐个检查它们是否满足题目要求。

工作原理：
穷举法不采取任何智能策略，它会尝试所有可能的解决方案。
这种方法简单直接，但通常效率较低，特别是当问题规模较大时。
时间复杂度：
穷举法的时间复杂度通常是指数级的，特别是当问题的规模增大时，计算量会急剧增加。

时间复杂度：O(N!) 或 O(2^N)，具体取决于问题的性质。
空间复杂度：通常较小，因为只需要存储当前尝试的状态。
应用场景：
小规模问题：对于问题规模较小时，穷举法可以直接使用。
密码破解：暴力破解算法是穷举法的典型应用。
组合问题：在组合问题中，穷举所有可能的组合。
示例代码（C++）：
假设我们要找出数组中的两个数，使它们的和等于目标值，使用穷举法：

cpp
bool bruteForceTwoSum(vector<int>& nums, int target) {
    int n = nums.size();
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (nums[i] + nums[j] == target) {
                return true;
            }
        }
    }
    return false;
}
总结对比：
算法	描述	时间复杂度	空间复杂度	优点	缺点
DFS	深度优先搜索，递归或栈的方式深入遍历图/树的每一条路径。	O(V + E)	O(V)	内存使用较小，适合深度探索。	不适合找到最短路径，可能会陷入死胡同。
BFS	广度优先搜索，层次遍历图/树。	O(V + E)	O(V)	适合找最短路径，逐层遍历。	需要更多内存，速度较慢。
Brute Force	穷举法，列出所有可能的解并检查每一种情况。	O(2^n) 或 O(N!)	O(1) 或 O(N)	简单直接，不需要复杂的思考。	极度低效，特别是问题规模较大时。
这些算法各有其适用的场景，选择合适的算法取决于具体的应用场景和问题的规模。
