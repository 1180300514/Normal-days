在面向对象编程（OOP）中，“对象”和“类”是两个基本概念。下面将详细解释这两个概念及它们之间的关系。
类 (Class)

类（Class） 是一种蓝图或模板，用于创建对象。类定义了对象的属性（数据/状态）和方法（行为/功能）。通过类，可以描述一类具有相同特征和行为的事物。
特点：

    封装：类可以将数据和操作这些数据的方法封装在一起。
    继承：一个类可以从另一个类继承属性和方法，从而实现代码的重用。
    多态：不同的类可以定义相同的方法名，但实现不同的功能。

对象 (Object)

对象（Object） 是类的实例。对象是类的具体实现，具有类所定义的属性和方法。每个对象可以拥有自己的状态（属性值），但共享类中的方法。
特点：

    每个对象都有自己独立的属性值。
    对象可以调用类中定义的方法。

类与对象的关系

    类是对象的模板：类定义了对象的结构和行为，实际上你可以把类看作是一种数据类型。
    对象是类的实例：当你根据类创建一个对象时，你就在使用这个类的定义来生成一个具体的实体。每个对象都可以拥有独立的属性。

总结

    类 是一种定义，它描述了一组对象共有的特征和行为。
    对象 是类的实例，是具体的、实际存在的实体，具有类中定义的属性和方法。

在面向对象编程 (OOP) 中，方法是与类关联的函数。它们定义了类实例（对象）可以执行的操作。方法通常可以访问和修改对象的属性。
class Dog:
    def bark(self):
        print("Woof!")#创建一个 Dog类
dog = Dog()    #创建一个Dog类的实例
dog.bark()       #调用bark方法
                         #输出：Woof!

