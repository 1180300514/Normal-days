2024.10.16
python使用缩进来表示代码块，不需要使用大括号
缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数
缩进不一致会导致报错
注：IndentationError: unindent does not match any outer indentation level

可以使用反斜杠 \ 来实现多行语句
python中数字有四种类型：整数、布尔型、浮点数和复数
complex (复数) - 复数由实部和虚部组成，形式为 a + bj，其中 a 是实部，b 是虚部，j 表示虚数单位。如 1 + 2j、 1.1 + 2.2j

import 与 from...import

在 python 用 import 或者 from...import 来导入相应的模块。

将整个模块(somemodule)导入，格式为： import somemodule

从某个模块中导入某个函数,格式为： from somemodule import somefunction

从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc

将某个模块中的全部函数导入，格式为： from somemodule import *


String
Python 中单引号 ' 和双引号 " 使用完全相同
使用三引号(''' 或 """)可以指定一个多行字符串
转义符 \   使用 r 可以让反斜杠不发生转义
字符串可以用 + 运算符连接在一起，用 * 运算符重复

Boolean
bool 是 int 的子类，因此布尔值可以被看作整数来使用，其中 True 等价于 1
在布尔上下文中，以下值会被解释为 False：
    None
    False
    0（零）
    空序列（如 '', (), [] 等）
    空映射（如 {}）

基本数据类型
 Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。
在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。

Python3 中常见的数据类型有：

 Number（数字）String（字符串）bool（布尔类型）List（列表）Tuple（元组）Set（集合）Dictionary（字典）

不可变数据：
Number（数字）整数、浮点数、复数
String（字符串）
Tuple（元组）不可变序列
字节数组类型 (bytes) 与bytearray类似但不可变

可变数据：
List（列表）有序的可变序列	，可以动态添加、修改、删除元素
Dictionary（字典）键值对的可变集合，无序且可动态修改
Set（集合）无序的可变集合，可以添加或删除元素
bytearray (字节数组)  可变的字节序列，适用于二进制数据操作

 isinstance 和 type 的区别在于：

    type()不会认为子类是一种父类类型。
    isinstance()会认为子类是一种父类类型。

>>> class A:
...     pass
... 
>>> class B(A):
...     pass
... 
>>> isinstance(A(), A)
True
>>> type(A()) == A 
True
>>> isinstance(B(), A)
True
>>> type(B()) == A
False

isinstance(a, int) 是 Python 中的一个内置函数，用于检查对象 a 是否是指定类型 int 的实例。该函数返回布尔值：如果 a 是 int 类型或其子类的实例，返回 True；否则返回 False。

isinstance(object, classinfo)

    object: 要进行类型检查的对象。
    classinfo: 可以是单个类型（如 int）或类型元组（如 (int, float)），表示多种可能的类型。
    检查对象是否是指定类或其子类的实例。
    可以接受一个元组作为第二个参数，以检查多个类型。

type(object):

    返回对象的直接类型（即它在创建时的确切类型）。
    如果你想知道一个对象是否属于某个特定的类，使用 type() 是不够灵活的，因为它只返回对象的具体类型，不考虑继承关系。

Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True==1、False==0 会返回 True，但可以通过 is 来判断类型。

issubclass(class, classinfo) 是 Python 内置的一个函数，用于检查一个类是否是另一个类的子类（或派生类）。这个函数可以帮助我们确认类之间的继承关系。

使用场景

    类型检查：在编写代码时，尤其是在定义接口或抽象基类时，可以使用 issubclass() 来确保类的正确性。
    动态行为：在某些情况下，你可能希望根据类的层次结构动态地决定某些行为。issubclass() 可以帮助你实现这种逻辑。

数值运算：
加减乘除+-*/
取余% 乘方**
注意：

    1、Python可以同时为多个变量赋值，如a, b = 1, 2。
    2、一个变量可以通过赋值指向不同类型的对象。
    3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。
    4、在混合计算时，Python会把整型转换成为浮点数。
复数由实数部分和虚数部分构成，可以用 a + bj，或者 complex(a,b) 

String类型
索引值以 0 为开始值，-1 为从末尾的开始位置。
与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 word[0] = 'm' 会导致错误。 


str = 'Runoob'  # 定义一个字符串变量

print(str)           # 打印整个字符串
print(str[0:-1])     # 打印字符串第一个到倒数第二个字符（不包含倒数第一个字符）
print(str[0])        # 打印字符串的第一个字符
print(str[2:5])      # 打印字符串第三到第五个字符（包含第五个字符）
print(str[2:])       # 打印字符串从第三个字符开始到末尾
print(str * 2)       # 打印字符串两次
print(str + "TEST")  # 打印字符串和"TEST"拼接在一起

Runoob
Runoo
R
noo
noob
RunoobRunoob
RunoobTEST

在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 0、空字符串、空列表、空元组等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。

List列表
列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。 
索引值以 0 为开始值，-1 为从末尾的开始位置。
与Python字符串不一样的是，列表中的元素是可以改变的

List 内置了有很多方法，例如 append()、pop() 等等

     1、列表写在方括号之间，元素用逗号隔开。
    2、和字符串一样，列表可以被索引和切片。
    3、列表可以使用 + 操作符进行拼接。
    4、列表中的元素是可以改变的。
Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：
letters = ['r', 'u', 'n', 'o', 'o', 'b']
letters[1:4:2]
['u', 'o']
如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：

Set（集合）
Python 中的集合（Set）是一种无序、可变的数据类型，用于存储唯一的元素
集合使用大括号 {} 表示，元素之间用逗号 , 分隔;另外，也可以使用 set() 函数创建集合
创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
# set可以进行集合运算
a = set('abracadabra')
b = set('alacazam')

print(a ^ b)     # a 和 b 中不同时存在的元素(异或）

Dictionary（字典）
列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。

 创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：

此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码

返回值

 一般来说，函数的返回值一般为一个，而函数返回多个值的时候，是以元组的方式返回的，python中的函数还可以接收可变长参数，比如以 "*" 开头的的参数名，会将所有的参数收集到一个元组上。 

Python 数据类型转换可以分为两种：

    隐式类型转换 - 自动完成
    显式类型转换 - 需要使用类型函数来转换
"较高数据类型"和"较低数据类型"是在隐式类型转换中用于描述数据精度的概念。精度可以理解为数据类型能够表示的信息量或详细程度。在Python中，数据类型的"高"和"低"主要根据它们的精度来判断。

这里的"较高"数据类型指的是能够表示更多信息（或更精确信息）的数据类型，而"较低"的数据类型则表示的信息较少。具体来说，比如浮点数就比整数"高"，因为浮点数不仅可以表示整数，还可以表示小数。所以在你的例子中，整数就会被自动转换为浮点数，以保证信息不丢失。

再比如，复数（complex）就比浮点数（float）和整数（int）"高"，因为复数可以表示实数和虚数，而浮点数和整数只能表示实数。所以在进行运算时，如果操作数包含复数，那么其他的浮点数或整数就会被转换为复数。

通常情况下，Python的数据类型的"高低"可以按照如下顺序理解：布尔（bool）< 整型（int） < 浮点型（float）< 复数（complex）。这个顺序主要根据数据类型可以表示的信息范围和精度来确定的。

不同数据类型之间能否随意转化：

虽然Python提供了一些内置的函数来实现不同数据类型之间的转换，如int(), float(), str(), list(), tuple(), set()等等，但并非所有类型的数据都可以被转换成其他任意类型。转换是否可行，主要取决于数据本身是否包含足够的信息来表示目标类型。

例如：

    你可以轻松地将整数转换为字符串，因为每一个整数都有一个明确的字符串表示（例如，整数123可以表示为字符串"123"）。
    类似地，一个只包含数字字符的字符串（如"123"）可以被转换为一个整数或浮点数，因为这个字符串中包含了足够的信息来表示一个数字。

然而：

    对于一个非数字字符串（如"Hello"），它无法被转换为一个整数或浮点数，因为这个字符串并不包含任何可以表示一个数字的信息。
    对于一个列表或元组，它可以被转换为一个集合（如果它的元素是不可变的），但不能被转换为一个整数，因为一个集合或列表中的元素无法合理地表示为一个单独的数字。

总的来说，数据类型的转换并非无限制，它取决于原始数据是否能够提供足够的信息来表示目标类型。当你在编程中进行类型转换时，需要注意这一点。

在 Python中，多行字符串（由三个单引号 ''' 或三个双引号 """ 包围的文本块）在某些情况下可以被视为一种实现多行注释的技巧。
多行注释用三个单引号 ''' 或者三个双引号 """ 将注释括起来
在 Python 中，多行注释是由三个单引号 ''' 或三个双引号 """ 来定义的，而且这种注释方式并不能嵌套使用。

:=	海象运算符，这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值

# 传统写法
n = 10
if n > 5:
    print(n)

# 使用海象运算符
if (n := 10) > 5:
    print(n)

f-string 的语法非常简单，只需要在字符串前加上 f，然后在花括号 {} 中放置表达式或变量。Python 会自动计算这些表达式并将结果插入到字符串中。

is 与 == 区别：

is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。

a = [1, 2, 3]
b = a  # b 指向与 a 相同的列表对象
c = a[:]  # c 是 a 的一个副本，指向不同的对象

python 与 c 语言概念上的一些差异，语言描述的可能未必准确，直接上例子：

>>> b = 5  
>>> a = 5  
>>> id(a)  
162334512  
>>> id(b)  
162334512  
>>> a is b  
True  

可以看出， python 中，变量是以内容为基准而不是像 c 中以变量名为基准，所以只要你的数字内容是5，不管你起什么名字，这个变量的 ID 是相同的，同时也就说明了 python 中一个变量可以以多个名称访问。

这样的设计逻辑决定了 python 中数字类型的值是不可变的，因为如果如上例，a 和 b 都是 5，当你改变了 a 时，b 也会跟着变，这当然不是我们希望的。

因此，正确的自增操作应该 a = a + 1 或者 a += 1，当此 a 自增后，通过 id() 观察可知，id 值变化了，即 a 已经是新值的名称。

注意：// 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。

python中的随机数函数

choice(seq)	从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
randrange ([start,] stop [,step]) 	从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1
random() 	随机生成下一个实数，它在[0,1)范围内。
seed([x]) 	改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
shuffle(lst) 	将序列的所有元素随机排序
uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。

python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符

Python列表函数&方法

Python包含以下函数:
序号	函数
1	len(list)
列表元素个数
2	max(list)
返回列表元素最大值
3	min(list)
返回列表元素最小值
4	list(seq)
将元组转换为列表

>>> tup3 = "a", "b", "c", "d"   #  不需要括号也可以
>>> type(tup3)
<class 'tuple'>                                                  								 #元组不需要括号也可以构建出来

元组中只包含一个元素时，需要在元素后面添加逗号 , ，否则括号会被当作运算符使用
元组中的元素值是不允许修改的，但我们可以对元组进行连接组合
元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组
与字符串一样，元组之间可以使用 +、+=和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。

创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典

Python 3.10 增加了 match...case 的条件判断，不需要再使用一连串的 if-else 来判断了
case _: 类似于 C 和 Java 中的 default:，当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功

atch语句后跟一个表达式，然后使用case语句来定义不同的模式。
case后跟一个模式，可以是具体值、变量、通配符等。
可以使用if关键字在case中添加条件。
_通常用作通配符，匹配任何值。

在 Python 中，self 是一个约定俗成的名称，代表类的实例（对象）本身。在定义类的方法时，self 用作第一个参数，以便方法可以访问该类的属性和其他方法。它允许您在类的内部引用当前对象的状态

while 循环使用 else 语句
如果 while 后面的条件语句为 false 时，则执行 else 的语句块

Python for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。

for循环的一般格式如下：
for <variable> in <sequence>:
    <statements>
else:
    <statements>

Python pass是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句

end 关键字。关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符

迭代器

迭代是 Python 最强大的功能之一，是访问集合元素的一种方式
迭代器是一个可以记住遍历的位置的对象
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退
迭代器有两个基本的方法：iter() 和 next()
字符串，列表或元组对象都可用于创建迭代器

生成器

在 Python 中，使用了 yield 的函数被称为生成器（generator）。

yield 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。
跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。
当在生成器函数中使用 yield 语句时，函数的执行将会暂停，并将 yield 后面的表达式作为当前迭代的值返回。
然后，每次调用生成器的 next() 方法或使用 for 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 yield 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。
调用一个生成器函数，返回的是一个迭代器对象。

加了两个星号 ** 的参数会以字典的形式导入

强制位置参数

Python3.8 新增了一个函数形参语法 / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。
在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参
def f(a, b, /, c, d, *, e, f):
    print(a, b, c, d, e, f)

lambda 函数特点：

    lambda 函数是匿名的，它们没有函数名称，只能通过赋值给变量或作为参数传递给其他函数来使用。
    lambda 函数通常只包含一行代码，这使得它们适用于编写简单的函数。

在 Python 中，__name__ 是一个特殊的属性，用于表示模块的名字。理解 __name__ 属性对于正确使用模块和包非常重要，尤其是在处理模块的导入与执行时。
用法

    直接运行模块:
    当你直接运行一个 Python 文件（例如 python module.py），该文件中的 __name__ 属性会被设置为 "__main__"。

    作为模块导入:
    如果你将该文件作为模块导入到其他文件中（例如 import module），那么此时 __name__ 属性会被设置为模块的名称（不包括文件扩展名），比如 "module"。

 注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。

import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。

反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  
