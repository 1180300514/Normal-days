Unicode 为信息的交换提供了一种标准格式，确保无论在何种平台或设备上，文本都能被正确解析和显示。
Unicode 使用码点（code points）来表示字符，每个字符都有一个唯一的十六进制值。例如：

字母“A”的Unicode值是 U+0041
汉字“你”的Unicode值是 U+4F60
表情符号“😊”的Unicode值是 U+1F60A
这些码点通常以 U+ 开头，后跟四位或更多的十六进制数字。

ASCII（American Standard Code for Information Interchange）**是一种基于拉丁字母的字符编码标准，用于表示文本中的字符。它使用7位二进制数（即0到127的十进制值）来表示128个字符，包括：

控制字符（如换行符、回车符等）
数字（0-9）
大写字母（A-Z）
小写字母（a-z）
特殊符号（如 !, @, #, $, %, &, *, 等）
ASCII与UTF的关系
兼容性：UTF-8是ASCII的超集，这意味着任何有效的ASCII字符在UTF-8中都是相同的。这使得现有使用ASCII的系统可以无缝迁移到UTF-8。

限制：ASCII只能表示128个字符，不适合处理多语言环境。而UTF则能够表示几乎所有书写系统中的字符，支持国际化应用。

解释器和编译器是两种将高级编程语言转换为机器代码（或中间代码）的工具，它们之间有几个关键的区别：

1. 工作方式
编译器：

将整个源代码一次性翻译成机器代码，生成一个可执行文件。
这个过程通常会在程序运行之前完成。
解释器：

逐行读取源代码并即时翻译成机器代码，然后立即执行。
这个过程是在程序运行时进行的。
2. 执行速度
编译器：

程序一旦编译完成，执行速度较快，因为所有代码都已转换为机器语言。
解释器：

通常执行速度较慢，因为每次运行程序时都需要逐行解析和执行代码。
3. 错误检测
编译器：

在编译阶段可以捕捉大部分语法错误，直到所有代码被成功编译后才会执行。
解释器：

在执行过程中逐行检查，可能在运行时才发现错误，导致调试过程较为复杂。
4. 中间产物
编译器：

生成中间文件（如目标代码或字节码），最终生成可执行文件。
解释器：

不生成中间文件，每次运行都必须经过解释。
5. 使用场景
编译器：

常用于性能要求较高的应用程序，例如C、C++等。
解释器：

常用于开发和脚本语言，例如Python、Ruby等，更易于调试和开发。
总结
编译器适合需要高效执行的环境，而解释器则更适合快速开发和灵活性需求。根据具体需求选择合适的工具是非常重要的。

数据结构

















数据结构常用且重要的基本包括在下面了：

    数组（Array）
    链表（Linked List）
    栈（Stack）
    队列（Queue）
    散列表

    （Hash table）
    堆（Heap）
    树（Tree）
    图（Graph）

数据结构的操作也无外乎增删改查：

    查找
    插入
    删除
    修改
    排序

算法

学习算法的套路很简单，多看、多写、多上机。

算法的常用且重要的内容也基本在下面了：

    回溯算法
    分治算法
    枚举算法
    贪心算法
    动态规划

 查找算法

    二分查找
    散列表查找
    树结构查找

字符串匹配

    暴力匹配
    KMP算法

10大排序算法

    冒泡排序
    选择排序
    插入排序
    希尔排序
    归并排序
    堆排序
    快速排序
    计数排序
    基数排序
    桶排序
